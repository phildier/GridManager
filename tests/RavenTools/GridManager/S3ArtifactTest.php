<?php

use \RavenTools\GridManager\S3Artifact;
use \Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-01 at 15:04:35.
 */
class S3ArtifactTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var S3Artifact
     */
    protected $object;
	protected $s3_client;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->s3_client = m::mock('Aws\Sqs\S3Client');
		$this->s3_client
			->shouldReceive('putObject')
			->andReturnNull()
			->once()
			->shouldReceive('putObject')
			->andThrow(new Exception("put object exception"))
			->once();

		$this->s3_client
			->shouldReceive('getObject')
			->andReturn(array("Body"=>"some test data for the get"))
			->once()
			->shouldReceive('getObject')
			->andThrow(new Exception("get object exception"))
			->once();

        $this->object = new S3Artifact(array(
			"client" => $this->s3_client,
			"bucket" => "phpunit"
		));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers S3Artifact::put
     */
    public function testPut()
    {
		// success
		$response = $this->object->put("some test data");
		$this->assertInternalType('string',$response);

		// failure
		$response = $this->object->put("some test data");
		$this->assertFalse($response);
    }

    /**
     * @covers S3Artifact::get
     */
    public function testGet()
    {
		// success
		$response = $this->object->get("object_key");
		$this->assertEquals("some test data for the get",$response);

		// failure
		$response = $this->object->get("object_key");
		$this->assertFalse($response);
    }
}
