<?php

use \RavenTools\GridManager\SQSQueue;
use \Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-29 at 09:37:05.
 */
class SQSQueueTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SQSQueue
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$queue_url = m::mock('Guzzle\Service\Resource\Model');
		$queue_url->shouldReceive('get')->andReturn("https://sqs.amazon.com/test_queue");

		$this->sqs_client = m::mock('Aws\Sqs\SqsClient');
		$this->sqs_client->shouldReceive('GetQueueUrl')->andReturn($queue_url);

		$guzzle_resource_model = m::mock('Guzzle\Service\Resource\Model');
		$this->sqs_client->shouldReceive('sendMessage')->once()->andReturn($guzzle_resource_model);
		$this->sqs_client->shouldReceive('sendMessage')->once()->andThrow("Exception","failed to send");

        $this->object = new SQSQueue(array(
			'sqs_client' => $this->sqs_client,
			'queue_name' => 'test_queue'
		));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SQSQueue::send
     */
    public function testSend()
    {
		$message = array(
			"one" => 1,
			"two" => 2,
			"three" => 3
		);

		$response = $this->object->send($message);
		$this->assertInstanceOf('Guzzle\Service\Resource\Model',$response);

		$response = $this->object->send($message);
		var_dump($response);
		$this->assertFalse($response);

    }

    /**
     * @covers SQSQueue::receive
     * @todo   Implement testReceive().
     */
    public function testReceive()
    {
		/*
		$guzzle_resource_model = m::mock('Guzzle\Service\Resource\Model');
		$this->sqs_client->shouldReceive('receiveMessage')->once()->andReturn($guzzle_resource_model);
		$this->sqs_client->shouldReceive('sendMessage')->once()->andThrow("Exception","failed to receive");

		$response = $this->object->receive();
		$this->assertInstanceOf('Guzzle\Service\Resource\Model',$response);

		$response = $this->object->receive();
		$this->assertFalse($response);
		*/
    }

    /**
     * @covers SQSQueue::delete
     * @todo   Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SQSQueue::length
     * @todo   Implement testLength().
     */
    public function testLength()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
