<?php

use RavenTools\GridManager\Input;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-27 at 14:51:31.
 */
class InputTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Input
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Input(array(
			'load_data_callback' => function($batch_size) {
				return array(
						array("one","two","three"),
						array("four","five","six")
						);
			},
			'work_item_callback' => function($work_item) {
				return $work_item;
			},
			'queue_callback' => function($work_item) {
				return true;
			}
		));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

	public function testRun() 
	{
		$response = $this->object->run();

		$this->assertArrayHasKey("success",$response);
		$this->assertEquals(2,$response['success']);
		$this->assertArrayHasKey("failure",$response);
		$this->assertEquals(0,$response['failure']);

	}

	public function testSetLoadDataCallback() 
	{
		$this->object->setLoadDataCallback(function($batch_size) {
			return array(
					array("ten","nine","eight"),
					array("seven","six","five"),
					array()
					);
		});

		$this->object->setQueueCallback(function($work_item) {
			static $run = 0;
			switch($run++) {
				case 0:
					return ($work_item[0] == "ten"); // true
				case 1:
					return ($work_item[0] == "seven"); // true
				case 2:
					return (count($work_item) > 0); // false
			}
		});

		$response = $this->object->run();

		$this->assertArrayHasKey("success",$response);
		$this->assertEquals(2,$response['success']);
		$this->assertArrayHasKey("failure",$response);
		$this->assertEquals(1,$response['failure']);

	}

	public function testAddWorkItemCallback() 
	{
		$this->object->setLoadDataCallback(function($batch_size) {
			return array(
					array("ten","nine","eight"),
					array("seven","six","five"),
					array("four","three","two")
					);
		});

		$array_reverse = function($work_item) {
			return array_reverse($work_item);
		};

		$this->object->addWorkItemCallback($array_reverse); // reverse
		$this->object->addWorkItemCallback($array_reverse); // normal
		$this->object->addWorkItemCallback($array_reverse); // reverse

		// after this chain of work item callbacks are run, we should end up with reversed items
		// this is testing that chaining work item callbacks is working correctly

		$this->object->setQueueCallback(function($work_item) {
			static $run = 0;
			switch($run++) {
				case 0:
					return ($work_item[0] == "eight"); // true
				case 1:
					return ($work_item[0] == "five"); // true
				case 2:
					return ($work_item[0] == "two"); // true
			}
		});

		$response = $this->object->run();

		// if everything matches up in the queue callback, we should have 3 successes here
		$this->assertArrayHasKey("success",$response);
		$this->assertEquals(3,$response['success']);
		$this->assertArrayHasKey("failure",$response);
		$this->assertEquals(0,$response['failure']);
	}
}
